
#+Title: emacs config
#+Author: Aresn
#+Description: mine config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+Startup: showeverything
#+Options: toc:2
* Table Of Contents 
- [[#introduction][introduction]]
- [[#important-to-load-first][Important to load first]]
  - [[#startup-performance][Startup Performance]]
  - [[#runtime-performance][Runtime Performance]]
  - [[#global-variables][Global variables]]
  - [[#sourcing-the-files][Sourcing the files]]
  - [[#using-the-file][Using the file]]
- [[#utilitys][utilitys]]
- [[#auto-tangle-configuration-file][Auto-tangle Configuration file]]
- [[#default-to-utf-8-encoding][Default to utf-8 encoding.]]
- [[#zooming-inout][Zooming In/Out]]
- [[#multi-file-example][Multi File Example]]
  - [[#adding-the-lisp-directory-to-load-path][Adding the lisp directory to load-path]]
- [[#use-package][Use Package]]
  - [[#straightel][straight.el]]
- [[#corfu][Corfu]]
- [[#orderless][Orderless]]
- [[#vertico-and-marginalia][Vertico and Marginalia]]
- [[#consult][Consult]]
- [[#which-key][Which-Key]]
- [[#devolepment][Devolepment]]
  - [[#evil-mode][Evil Mode]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#company][Company]]
  - [[#general-keybindings][General Keybindings]]
  - [[#language-modes][Language modes]]
  - [[#lsp][Lsp]]
  - [[#lsp-ui][lsp-ui]]
  - [[#org-mode][Org Mode]]
  - [[#projectile][Projectile]]
  - [[#yasnippet][Yasnippet]]
- [[#appearance][Appearance]]
  - [[#dashboard][Dashboard]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#fonts][Fonts]]
  - [[#full-screan][full screan]]
  - [[#sound][Sound]]
  - [[#mouse][Mouse]]
  - [[#modeline][Modeline]]
  - [[#set-theme][Set Theme]]
  - [[#git][Git]]
- [[#good-defaults][Good Defaults]]

* introduction

* Important to load first
** Startup Performance
Make startup faster by reducing the frequency of garbage collection. This will be set back when startup finishes.
#+begin_src emacs-lisp
    ;; The default is 800 kilobytes. Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
We also increase Read Process Output Max so emacs can read more data.
#+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
    ;; Increase the amount of data which Emacs reads from the process
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

** Global variables
#+BEGIN_SRC emacs-lisp
(setq
 globals--leader-key   "<SPC>"                    ; Leader prefix key used for most bindings
 )
#+END_SRC

** Sourcing the files
To use the elisp files we need to load it.
Notes:
- Don't forget the file and the provide name needs to be the same.
- When naming elisp files, functions, it is recommended to use a group name (e.g init-, start- or any custom name), so it does not get mixed up with other names, functions.
#+begin_src emacs-lisp
    ;; (require 'start-multiFileExample)
#+end_src

** Using the file
And now we can use everything from that file.
#+begin_src emacs-lisp
    ;; (start/hello)
#+end_src

Emacs does a lot of things at startup and here, we disable pretty much everything.
#+begin_src emacs-lisp

(setq-default
 inhibit-startup-screen t               ; Disable start-up screen
 inhibit-startup-message t              ; Disable startup message
 inhibit-startup-echo-area-message t)    ; Disable initial echo message
#+END_SRC

* utilitys 
#+BEGIN_SRC emacs-lisp
 (defun open-config-file ()
  (interactive)
  (find-file (expand-file-name "config.org" user-emacs-directory)))
#+END_SRC

* Auto-tangle Configuration file
Auto-Tangle Org configuration file for better startup times.
If you want to use this don't forget to add this to the top of the org document (#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes)

*Remember*, if this code can't be loaded (errors before this code), the init.el file won't update on change!
To fix this, you need to find this file (C-x C-f), fix the error and press C-c C-v t to tangle it manually.

This snippet adds a hook to org-mode buffers so that start/org-babel-tangle-config gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so,
automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp
    (defun start/org-babel-tangle-config ()
      "Automatically tangle our Emacs.org config file when we save it. Credit to Emacs From Scratch for this one!"
      (when (string-equal (file-name-directory (buffer-file-name))
                          (expand-file-name user-emacs-directory))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'start/org-babel-tangle-config)))
#+end_src

* Default to utf-8 encoding.

   #+begin_src emacs-lisp
     (set-default-coding-systems 'utf-8)
     (set-language-environment "UTF-8")
     (prefer-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
   #+end_src

* Zooming In/Out
You can use the bindings C-+ C-- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
    (use-package emacs
      :bind
      ("C-+" . text-scale-increase)
      ("C--" . text-scale-decrease)
      ("<C-wheel-up>" . text-scale-increase)
      ("<C-wheel-down>" . text-scale-decrease))
#+end_src
 
* Multi File Example
** Adding the lisp directory to load-path
Adds the lisp directory to emacs's load path to search for elisp files.
This is necessary, because emacs does not search the entire user-emacs-directory.
The directory name can be anything, just add it to the load-path.
#+begin_src emacs-lisp
    ;; (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

* Use Package
#+begin_src emacs-lisp
    (require 'use-package-ensure) ;; Load use-package-always-ensure
    (setq use-package-always-ensure t) ;; Always ensures that a package is installed
    (setq package-archives '(("melpa" . "https://melpa.org/packages/") ;; Sets default package repositories
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/"))) ;; For Eat Terminal
#+end_src

** straight.el
#+BEGIN_SRC emacs-lisp
 (defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

* Corfu
Enhances in-buffer completion with a small completion popup.
Corfu is a small package, which relies on the Emacs completion facilities and concentrates on providing a polished completion.
For more configuration options check out their [[https://github.com/minad/corfu][git repository]].
Notes:
- To enter Orderless field separator, use M-SPC.
#+begin_src emacs-lisp
    (use-package corfu
      ;; Optional customizations
      :custom
      (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)                 ;; Enable auto completion
      (corfu-auto-prefix 2)          ;; Minimum length of prefix for auto completion.
      (corfu-popupinfo-mode t)       ;; Enable popup information
      (corfu-popupinfo-delay 0.5)    ;; Lower popupinfo delay to 0.5 seconds from 2 seconds
      (corfu-separator ?\s)          ;; Orderless field separator, Use M-SPC to enter separator
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
      ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
      ;; (corfu-scroll-margin 5)        ;; Use scroll margin
      (completion-ignore-case t)
      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (tab-always-indent 'complete)
      (corfu-preview-current nil) ;; Don't insert completion without confirmation
      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      :init
      (global-corfu-mode))

    (use-package nerd-icons-corfu
      :after corfu
      :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

* Orderless
Completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.
Recomended for packages like vertico, corfu.
#+begin_src emacs-lisp
    (use-package orderless
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

* Vertico and Marginalia
- Vertico: Provides a performant and minimalistic vertical completion UI based on the default completion system.
- Savehist: Saves completion history.
- Marginalia: Adds extra metadata for completions in the margins (like descriptions).
- Nerd-icons-completion: Adds icons to completion candidates using the built in completion metadata functions.

We use this packages, because they use emacs native functions. Unlike Ivy or Helm.
One alternative is ivy and counsel, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] for more inforomation.
#+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    (savehist-mode) ;; Enables save history mode

    (use-package marginalia
      :after vertico
      :init
      (marginalia-mode))

    (use-package nerd-icons-completion
      :after marginalia
      :config
      (nerd-icons-completion-mode)
      :hook
      ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))
#+end_src

* Consult
Provides search and navigation commands based on the Emacs completion function.
Check out their [[https://github.com/minad/consult][git repository]] for more awesome functions.
#+begin_src emacs-lisp
    (use-package consult
      ;; Enable automatic preview at point in the *Completions* buffer. This is
      ;; relevant when you use the default completion UI.
      :hook (completion-list-mode . consult-preview-at-point-mode)
      :init
      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0.5
            register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)
      :config
      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key "M-.")
      ;; (setq consult-preview-key '("S-<down>" "S-<up>"))

      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      ;; (consult-customize
      ;; consult-theme :preview-key '(:debounce 0.2 any)
      ;; consult-ripgrep consult-git-grep consult-grep
      ;; consult-bookmark consult-recent-file consult-xref
      ;; consult--source-bookmark consult--source-file-register
      ;; consult--source-recent-file consult--source-project-recent-file
      ;; :preview-key "M-."
      ;; :preview-key '(:debounce 0.4 any))

      ;; By default `consult-project-function' uses `project-root' from project.el.
      ;; Optionally configure a different project root function.
       ;;;; 1. project.el (the default)
      ;; (setq consult-project-function #'consult--default-project--function)
       ;;;; 2. vc.el (vc-root-dir)
      ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
       ;;;; 3. locate-dominating-file
      ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
       ;;;; 4. projectile.el (projectile-project-root)
      (autoload 'projectile-project-root "projectile")
      (setq consult-project-function (lambda (_) (projectile-project-root)))
       ;;;; 5. No project support
      ;; (setq consult-project-function nil)
      )
#+end_src

* Which-Key
Which-key is a helper utility for keychords (which key to press).
#+begin_src emacs-lisp
    (use-package which-key
      :init
      (which-key-mode 1)
      :diminish
      :custom
      (which-key-side-window-location 'bottom)
      (which-key-sort-order #'which-key-key-order-alpha) ;; Same as default, except single characters are sorted alphabetically
      (which-key-sort-uppercase-first nil)
      (which-key-add-column-padding 1) ;; Number of spaces to add to the left of each column
      (which-key-min-display-lines 6)  ;; Increase the minimum lines to display, because the default is only 1
      (which-key-idle-delay 0.8)       ;; Set the time delay (in seconds) for the which-key popup to appear
      (which-key-max-description-length 25)
      (which-key-allow-imprecise-window-fit nil)) ;; Fixes which-key window slipping out in Emacs Daemon
#+end_src


* Devolepment 

** Evil Mode
An extensible vi/vim layer for Emacs. Because…let’s face it. The Vim keybindings are just plain better.
Notes:
- You can toggle evil mode with C-z.
- To paste without copy (yank) select the text and use P (shift-p).

If you don't want to use evil-mode don't forget to remove:
- Messages buffer fix in Good default section (:ghook)
- And also change general.el keybindings and setup (general-evil-setup, :states, etc.)
NOTE: пометка для себя: смотрел документацию там много чего можно настроить но пока что я считаю в этом нет необходимости, тоже самое про evil collection  
#+begin_src emacs-lisp
(use-package evil
  :init ;; Execute code Before a package is loaded
  (evil-mode)
  :config ;; Execute code After a package is loaded
  :custom ;; Customization of package custom variables
  (evil-want-keybinding nil)    ;; Disable evil bindings in other modes (It's not consistent and not good)
  (evil-want-C-u-scroll t)      ;; Set C-u to scroll up
  (evil-want-C-i-jump nil)      ;; Disables C-i jump
  (evil-undo-system 'undo-redo) ;; C-r to redo
  (org-return-follows-link t)   ;; Sets RETURN key in org-mode to follow links
  ;; Unmap keys in 'evil-maps. If not done, org-return-follows-link will not work
  :bind (:map evil-motion-state-map
              ("SPC" . nil)
              ("RET" . nil)
              ("TAB" . nil)))
(use-package evil-collection
  :after evil
  :config
  ;; Setting where to use evil-collection
  (setq evil-collection-mode-list '(dired ibuffer magit corfu vertico consult))
  (evil-collection-init))
#+end_src

** Rainbow Delimiters
Adds colors to brackets.
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Company
   Modular in-buffer completion framework.
   #+begin_src emacs-lisp
              (use-package company
                :straight
                :defer 2
                :diminish
                :custom
                (company-begin-commands '(self-insert-command))

                ;; This is one of the values (together with company-idle-delay),
                ;; based on which Company auto-stars looking up completion candidates. 
                ;; This option configures how many characters have to be typed in by a user before candidates start to be collected and displayed.
                ;; An often choice nowadays is to configure this option to a lower number than the default value of 3. 
                (company-minimum-prefix-length 1)

                ;; This is the second of the options that configure Company’s auto-start behavior (together with company-minimum-prefix-length).
                ;; The value of this option defines how fast Company is going to react to the typed input,
                ;; such that setting company-idle-delay to 0 makes Company react immediately, nil disables auto-starting,
                ;; and a larger value postpones completion auto-start for that number of seconds. For an even fancier setup,
                ;; set this option value to a predicate function, as shown in the following example: 
                (company-idle-delay 0)

                (company-show-numbers t)

                ;; This option allows to specify in which major modes company-mode can be enabled by (global-company-mode).
                ;; The default value of t enables Company in all major modes.
                ;; Setting company-global-modes to nil equal in action to toggling off global-company-mode.
                ;; Providing a list of major modes results in having company-mode enabled in the listed modes only.
                (global-company-mode t)
                
                ;; An annotation is a string that carries additional information about a candidate; such as a data type, function arguments,
                ;; or whatever a backend appoints to be a valuable piece of information about a candidate. By default,
                ;; the annotations are shown right beside the candidates. Setting the option value to t aligns annotations to the right side of the tooltip 
                (company-tooltip-align-annotations t)           

                ;; Controls the maximum number of the candidates shown simultaneously in the tooltip (the default value is 10).
                ;; When the number of the available candidates is larger than this option’s value, Company paginates the results. 
                (company-tooltip-limit 4)    
)

              (use-package company-box
                :after company
                :diminish
                :hook (company-mode . company-box-mode))
   #+end_src

** General Keybindings
A keybinding framework to set keybindings easily.
The Leader key is what you will press when you want to access your keybindings (SPC + . Find file).
To search and replace, use query-replace-regexp to replace one by one C-M-% (SPC to replace n to skip).
NOTE: кнопки я современем настрою а не в один присест
#+begin_src emacs-lisp
    (use-package general
      :config
      (general-evil-setup)
      ;; Set up 'SPC' as the leader key
      (general-create-definer start/leader-keys
        :states '(normal insert visual motion emacs)
        :keymaps 'override
        :prefix "SPC"           ;; Set leader key
        :global-prefix "C-SPC") ;; Set global leader key

      (start/leader-keys
        "." '(find-file :wk "Find file")
        "TAB" '(comment-line :wk "Comment lines")
        "p" '(projectile-command-map :wk "Projectile command map"))

      (start/leader-keys
        "f" '(:ignore t :wk "Find")
        "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
        "f r" '(consult-recent-file :wk "Recent files")
        "f f" '(consult-fd :wk "Fd search for files")
        "f g" '(consult-ripgrep :wk "Ripgrep search in files")
        "f l" '(consult-line :wk "Find line")
        "f i" '(consult-imenu :wk "Imenu buffer locations"))

      (start/leader-keys
        "b" '(:ignore t :wk "Buffer Bookmarks")
        "b b" '(consult-buffer :wk "Switch buffer")
        "b k" '(kill-this-buffer :wk "Kill this buffer")
        "b i" '(ibuffer :wk "Ibuffer")
        "b n" '(next-buffer :wk "Next buffer")
        "b p" '(previous-buffer :wk "Previous buffer")
        "b r" '(revert-buffer :wk "Reload buffer")
        "b j" '(consult-bookmark :wk "Bookmark jump"))

      (start/leader-keys
        "d" '(:ignore t :wk "Dired")
        "d v" '(dired :wk "Open dired")
        "d j" '(dired-jump :wk "Dired jump to current"))

      (start/leader-keys
        "g" '(:ignore t :wk "Git")
        "g g" '(magit-status :wk "Magit status"))

      (start/leader-keys
        "h" '(:ignore t :wk "Help") ;; To get more help use C-h commands (describe variable, function, etc.)
        "h q" '(save-buffers-kill-emacs :wk "Quit Emacs and Daemon")
        "h r" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el"))
                :wk "Reload Emacs config"))

      (start/leader-keys
        "s" '(:ignore t :wk "Show")
        "s e" '(eat :wk "Eat terminal"))

      (start/leader-keys
        "t" '(:ignore t :wk "Toggle")
        "t t" '(visual-line-mode :wk "Toggle truncated lines (wrap)")
        "t l" '(display-line-numbers-mode :wk "Toggle line numbers")))
#+end_src

** Language modes

*** python mode
#+BEGIN_SRC emacs-lisp
 (use-package python-mode
  :straight
  :ensure t
  :hook (python-mode . lsp-deferred)
  :custom
  ;; NOTE: Set these if Python 3 is called "python3" on your system!
  ;; (python-shell-interpreter "python3")
  ;; (dap-python-executable "python3")
  (dap-python-debugger 'debugpy)
  :config
  (require 'dap-python))
#+END_SRC

** Lsp
#+BEGIN_SRC emacs-lisp
(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :straight
  :commands (lsp lsp-deferred)
  :hook ((lsp-mode . efs/lsp-mode-setup)
        (c-mode . lsp))

  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t)
)
#+END_SRC

** lsp-ui
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui)
#+END_SRC

** Org Mode
Org mode is one of the things that emacs is loved for.
Once you've used it for a bit, you'll understand why people love it. Even reading about it can be inspiring!
For example, this document is effectively the source code and descriptions bound into the one document,
much like the literate programming ideas that Donald Knuth made famous.
#+begin_src emacs-lisp
    (use-package org
      :ensure nil
      :custom
      (org-edit-src-content-indentation 4) ;; Set src block automatic indent to 4 instead of 2.

      :hook
      (org-mode . org-indent-mode) ;; Indent text
      ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
      ;; Otherwise, org-tempo is broken when you try to <s TAB...
      ;;(org-mode . (lambda ()
      ;;              (setq-local electric-pair-inhibit-predicate
      ;;                          `(lambda (c)
      ;;                             (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
      )
#+end_src

**** Table of Contents
#+begin_src emacs-lisp
    (use-package toc-org
      :commands toc-org-enable
      :hook (org-mode . toc-org-mode))
#+end_src

**** Org Superstar
Prettify headings and plain lists in Org mode. Modern version of org-bullets.
#+begin_src emacs-lisp
    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode))
#+end_src

**** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.
Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.
#+begin_src emacs-lisp
    (use-package org-tempo
      :ensure nil
      :after org)
#+end_src

** Projectile
Project interaction library for Emacs.
#+begin_src emacs-lisp
(use-package projectile
  :init
  (projectile-mode)
  :custom
  (projectile-run-use-comint-mode t) ;; Interactive run dialog when running projects inside emacs (like giving input)
  (projectile-switch-project-action #'projectile-dired) ;; Open dired when switching to a project
  (projectile-project-search-path '("~/projects/" "~/work/" ("~/github" . 1)))) ;; . 1 means only search the first subdirectory level for projects
;; Use Bookmarks for smaller, not standard projects
#+end_src

** Yasnippet
A template system for Emacs. And yasnippet-snippets is a snippet collection package.
To use it write out the full keyword (or use autocompletion) and press Tab.
#+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :hook (prog-mode . yas-minor-mode))
#+end_src


* Appearance

** Dashboard
#+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :straight
      :demand t
      :init
      (add-hook 'dashboard-mode-hook (lambda () (setq show-trailing-whitespace nil)))
      :custom
      (dashboard-center-content t)
      (dashboard-set-heading-icons t)
      (dashboard-set-file-icons t)
      (dashboard-set-navigator t)
      :config
      (dashboard-setup-startup-hook))
#+END_SRC

** Nerd Icons
For icons and more helpful UI.
This is an icon set that can be used with dired, ibuffer and other Emacs programs.

Don't forget to use nerd-icons-install-fonts.

We use Nerd icons because it has more, better icons and all-the-icons only supports GUI.
While nerd-icons supports both GUI and TUI.
#+begin_src emacs-lisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Fonts
#+begin_src emacs-lisp
    (set-face-attribute 'default nil                                                     
                        :font "JetBrainsMonoNL Nerd Font" ;; Set your favorite type of font or download JetBrains Mono
                        :height 140
                        :weight 'medium)
    ;; This sets the default font on all graphical frames created after restarting Emacs.
    ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
    ;; are not right unless I also add this method of setting the default font.

    ;;(add-to-list 'default-frame-alist '(font . "JetBrains Mono")) ;; Set your favorite font
    (setq-default line-spacing 0.12)
#+end_src

** full screan
#+begin_src emacs-lisp
(if (eq window-system 'ns)
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC

** Sound

Disable the bell (auditory or visual).

#+begin_src emacs-lisp

(setq-default visible-bell nil             ; No visual bell      
              ring-bell-function 'ignore)  ; No bell

#+end_src

** Mouse :MODE:

Mouse behavior can be finely controlled using the [[help:mouse-avoidance-mode][mouse-avoidance-mode]].

#+begin_src emacs-lisp

(setq-default mouse-yank-at-point t) ; Yank at point rather than pointer
(mouse-avoidance-mode 'exile)        ; Avoid collision of mouse with point

#+end_src

** Cursor
Record cursor position from one session ot the other
#+begin_src emacs-lisp

(setq save-place-file (expand-file-name "saveplace" user-emacs-directory)
      save-place-forget-unreadable-files t)

(save-place-mode 1)

#+end_src

** Modeline
Replace the default modeline with a prettier more useful.
#+begin_src emacs-lisp
        (use-package doom-modeline
          :straight t
          :init (doom-modeline-mode)
          :custom

          ;; Whether display icons in the mode-line.
          ;; While using the server mode in GUI, should set the value explicitly. 
          (doom-modeline-major-mode-icon t)
      
          ;; Whether display the colorful icon for `major-mode'.
          ;; It respects `nerd-icons-color-icons'.
          (doom-modeline-major-mode-color-icon t)
 
          ;; Whether display the lsp icon. It respects option `doom-modeline-icon'.
          (doom-modeline-lsp-icon t)

          ;; Whether display the modern icons for modals.
          (doom-modeline-modal-modern-icon nil)

          ;; How tall the mode-line should be. It's only respected in GUI.
          ;; If the actual char height is larger, it respects the actual height.
          (doom-modeline-height 35)
   
          ;; Whether display the time icon. It respects option `doom-modeline-icon'.
          (doom-modeline-time-icon t)

          ;; Whether display the live icons of time.
          ;; It respects option `doom-modeline-icon' and option `doom-modeline-time-icon'.
          (doom-modeline-time-live-icon t)

          ;; Whether display the buffer encoding.
          (doom-modeline-buffer-encoding t)

          ;; Whether display the indentation information.
          (doom-modeline-indent-info t)

          ;; The maximum displayed length of the branch name of version control.
          (doom-modeline-vcs-max-length 15)

          ;; The function to display the branch name.
          (doom-modeline-vcs-display-function #'doom-modeline-vcs-name)

     
)
#+end_src
 
** Set Theme
#+begin_src emacs-lisp
(use-package ef-themes
  :config
  (load-theme 'ef-spring t ))
#+end_src

** Git
*** Magit
Complete text-based user interface to Git.
#+begin_src emacs-lisp
    (use-package magit
      :commands magit-status)
#+end_src

*** Diff-hl
Highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src emacs-lisp
    (use-package diff-hl
      :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
             (magit-pre-refresh  . diff-hl-magit-pre-refresh)
             (magit-post-refresh . diff-hl-magit-post-refresh))
      :init (global-diff-hl-mode))
#+end_src

* Good Defaults
#+begin_src emacs-lisp
    (use-package emacs
      :custom
      (show-help-function nil)    ; No help text
      (use-file-dialog nil)       ; No file dialog
      (use-dialog-box nil)        ; No dialog box
      (pop-up-windows nil)       ; No popup windows
      (menu-bar-mode nil)         ;; Disable the menu bar
      (tool-bar-mode nil)         ;; Disable the tool bar
      ;;(inhibit-startup-screen t)  ;; Disable welcome screen
      (scroll-bar-mode nil)                    ; No scroll bars
      (delete-selection-mode t)   ;; Select text and delete it by typing.
      (electric-indent-mode nil)  ;; Turn off the weird indenting that Emacs does by default.
      (electric-pair-mode t)      ;; Turns on automatic parens pairing

      (blink-cursor-mode t)     ;; Don't blink cursor
      (global-auto-revert-mode t) ;; Automatically reload file and show changes if the file has changed

      ;;(dired-kill-when-opening-new-dired-buffer t) ;; Dired don't create new buffer
      ;;(recentf-mode t) ;; Enable recent file mode

      ;;(global-visual-line-mode t)           ;; Enable truncated lines
      ;;(display-line-numbers-type 'relative) ;; Relative line numbers
      (global-display-line-numbers-mode t)  ;; Display line numbers

      (mouse-wheel-progressive-speed t) ;; Disable progressive speed when scrolling
      (scroll-conservatively 10) ;; Smooth scrolling
      ;;(scroll-margin 8)

      (tab-width 4)

      (make-backup-files nil) ;; Stop creating ~ backup files
      (auto-save-default nil) ;; Stop creating # auto save files
      :hook
      (prog-mode . (lambda () (hs-minor-mode t))) ;; Enable folding hide/show globally
      :config
      ;; Move customization variables to a separate file and load it, avoid filling up init.el with unnecessary variables
      (setq custom-file (locate-user-emacs-file "custom-vars.el"))
      (load custom-file 'noerror 'nomessage)
      :bind (
             ([escape] . keyboard-escape-quit) ;; Makes Escape quit prompts (Minibuffer Escape)
             )
      ;; Fix general.el leader key not working instantly in messages buffer with evil mode
      :ghook ('after-init-hook
              (lambda (&rest _)
                (when-let ((messages-buffer (get-buffer "*Messages*")))
                  (with-current-buffer messages-buffer
                    (evil-normalize-keymaps))))
              nil nil t)
      )
#+end_src
